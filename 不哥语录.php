<?php
/**
 * Created by PhpStorm.
 * User: lilizhao
 * Date: 2019/2/22
 * Time: 17:06
 */
//算红包的php面试题
假设最小单位1块钱
可以每次从1到总数的一半随机
然后每次都从1 到剩下的金额的一半随机
完了如果有小于1的，拿它和数量多的，再加起来随机一下
function create($total, $count)
{
    $result = array();
    $last = $total;
    for ($i = 1; $i <= $count - 1; $i++)
    {
        $value = rand(1, (int)($last / 2));
        $last -= $value;
        $result[] = $value;
    }
    $result[] = $last;

    sort($result);

    while ($result[0] < 1)
    {
        for ($i = 0; $i < count($result); $i++)
        {
            if ($result[$i] >= 1)
            {
                break;
            }

            $a = $i;
            $b = $count - $i - 1;
            $sub_total = $result[$a] + $result[$b];

            $result[$a] = rand(1, (int)($sub_total / 2));
            $result[$b] = $sub_total - $result[$a];
        }

        sort($result);
    }

    shuffle($result);

    return $result;
}

$result = create(100, 20);
print_r($result);
Array
(
    [0] => 1
    [1] => 1
    [2] => 3
    [3] => 1
    [4] => 6
    [5] => 18
    [6] => 1
    [7] => 21
    [8] => 7
    [9] => 1
    [10] => 2
    [11] => 10
    [12] => 4
    [13] => 6
    [14] => 4
    [15] => 1
    [16] => 5
    [17] => 1
    [18] => 6
    [19] => 1
)
?>

首先，抗并发，就是用机器扛，这个最简单
如果仅仅是计算节点，加机器就好了
然后，注意cpu，io等等，有时候io是瓶颈，会导致cpu压不满
麻烦的数据，数据有状态
没法所有节点同步
所以数据库很难通过简单加机器
在最后，redis也有限制
单个redis的qps，大约8-10万
超过这个数，redis自己就是瓶颈
算这个红包，根本不需要保持什么状态，干嘛要自己没事找事弄个redis
回到所谓高并发
那刚刚那个红包来说
把这个函数，包装成一个接口，比如http接口
这是个纯计算
如果一台机器，1万tps，
用10台，不久10万了
机器太多，怎么把他们联合起来，是另一个问题
负载均衡器也是有极限的
具体情况具体分析，这个一样处理
写成第二个接口
这样你就有两种红包算法的api接口了
一台机器难道只能执行一个函数？
而且有种方案叫，一套代码，平行部署
如果真的有你说的这种情况，a接口和b接口不能同时共存，从代码维护角度出发，就可以一套代码，平行部署
每台机器上都有2个接口，可是某些机器开放A，某些机器开放B
运维可以通过路由设置
比如nginx做前端，后面有php1, php2两台机器
可以弄个规则，让create转发到php1, create2转发到php2
而开发，只需要维护一套代码。也只需要一套上线发布系统
如果2更重要，如果php2挂了，那把请求转发到php1, 把1的请求停掉就好了
这种可以认为服务降级
如果php1，有1万人调用, php2，有100万人调用，2挂了，就只能先牺牲1
那你的代码，不是就引入了状态
没法平行部署了
总之代码是死的，人是活的，办法是要动脑子去想的
单纯的计算节点，状态越少，越好维护
反正都是计算节点
对于代码维护来说，当然没有重复代码最好
从工程来说，尽量不要动已经稳定的东西
这俩方面，需要权衡
也不是一定的
视情况而定
比如今天就周五了，产品新来个需求，我肯定新搞个接口算了
有问题也是新接口的问题，不会影响老系统已经现有的客户
在以前接口上改，万一有bug没测出来，发布出去影响了客户，周末谁来加班
所以我说脑子不好使的，一根筋的，干不好这行
